plot(Date_Time, Sub_metering_1, type = 'l')
plot(Date_Time, Sub_metering_2, type = 'l', col = 'red')
plot(Date_Time, Sub_metering_3, type = 'l', col = 'blue')
})
par(mfrow)
par('mfrow')
with(df, {plot(Date_Time, Sub_metering_1, type = 'l')})
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
plot(Date_Time, Sub_metering_2, type = 'l', col = 'red')
plot(Date_Time, Sub_metering_3, type = 'l', col = 'blue')
})
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
plot(Date_Time, Sub_metering_2, type = 'l', col = 'red')
plot(Date_Time, Sub_metering_3, type = 'l', col = 'blue')
})
dev.off()
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
plot(Date_Time, Sub_metering_2, type = 'l', col = 'red')
plot(Date_Time, Sub_metering_3, type = 'l', col = 'blue')
})
dev.off()
?line
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
line(Date_Time, Sub_metering_2, col = 'red')
line(Date_Time, Sub_metering_3, col = 'blue')
})
dev.off()
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
abline(Date_Time, Sub_metering_2, col = 'red')
abline(Date_Time, Sub_metering_3, col = 'blue')
})
dev.off()
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
line(Date_Time, Sub_metering_2, col = 'red')
line(Date_Time, Sub_metering_3, col = 'blue')
})
dev.off()
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
line(Date_Time, Sub_metering_2, col = 'red')
line(Date_Time, Sub_metering_3, col = 'blue')
})
dev.off()
?plot
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
lines(Date_Time, Sub_metering_2, col = 'red')
lines(Date_Time, Sub_metering_3, col = 'blue')
})
dev.off()
?legend
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
lines(Date_Time, Sub_metering_2, col = 'red')
lines(Date_Time, Sub_metering_3, col = 'blue')
title(xlab = '', ylab = 'Global Active Power (kilowatts)')
legend('topright')
})
dev.off()
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
lines(Date_Time, Sub_metering_2, col = 'red')
lines(Date_Time, Sub_metering_3, col = 'blue')
title(xlab = '', ylab = 'Global Active Power (kilowatts)')
legend('topright', legend = c('Sub_metering_1', 'Sub_metering_2',
'Sub_metering_3'))
})
dev.off()
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l')
lines(Date_Time, Sub_metering_2, col = 'red')
lines(Date_Time, Sub_metering_3, col = 'blue')
title(xlab = '', ylab = 'Energy sub metering')
legend('topright', lty = 1, col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2',
'Sub_metering_3'))
})
dev.off()
png(filename = 'plot3.png', width = 480, height = 480)
with(df, {
plot(Date_Time, Sub_metering_1, type = 'l', xlab = '',
ylab = 'Energy sub metering')
lines(Date_Time, Sub_metering_2, col = 'red')
lines(Date_Time, Sub_metering_3, col = 'blue')
legend('topright', lty = 1, col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2',
'Sub_metering_3'))
})
dev.off()
names(df)
# Make Plot 4
png(filename = 'plot4.png', width = 480, height = 480)
par(mfrow = c(2, 2))
# Topleft plot
hist(df$Global_active_power, main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", col = 'red')
# Topright plot
with(df, plot(Date_Time, Voltage, type = 'l', xlab = 'datetime'))
# Bottomleft plot
with(df, {
# If use title to designate xlab and ylab after plots, overlapping
# will occur
plot(Date_Time, Sub_metering_1, type = 'l', xlab = '',
ylab = 'Energy sub metering')
# MUST use lines, not plot, to add the other two lines
lines(Date_Time, Sub_metering_2, col = 'red')
lines(Date_Time, Sub_metering_3, col = 'blue')
legend('topright', lty = 1, col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2',
'Sub_metering_3'))
})
# Bottomright plot
with(df, plot(Date_Time, Global_reactive_power, type = 'l', xlab = 'datetime'))
dev.off()
?legend
# Make Plot 4
png(filename = 'plot4.png', width = 480, height = 480)
par(mfrow = c(2, 2))
# Topleft plot
with(df, plot(Date_Time, Global_active_power, type = 'l', xlab = '',
ylab = 'Global Active Power (kilowatts)'))
# Topright plot
with(df, plot(Date_Time, Voltage, type = 'l', xlab = 'datetime'))
# Bottomleft plot
with(df, {
# If use title to designate xlab and ylab after plots, overlapping
# will occur
plot(Date_Time, Sub_metering_1, type = 'l', xlab = '',
ylab = 'Energy sub metering')
# MUST use lines, not plot, to add the other two lines
lines(Date_Time, Sub_metering_2, col = 'red')
lines(Date_Time, Sub_metering_3, col = 'blue')
legend('topright', lty = 1, col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2',
'Sub_metering_3'), bty = 'n')
})
# Bottomright plot
with(df, plot(Date_Time, Global_reactive_power, type = 'l', xlab = 'datetime'))
dev.off()
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom =c('point', 'smooth'), facets = . ~ drv, method = 'loess')
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_smooth()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = 'lm')
g + geom_point() + geom_smooth(method = 'lm') + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = 'lm') + facet_grid(. ~ drv) + ggtitle('Swirl Rules!')
g + geom_point(color = 'pink', size = 4, alpha = .5)
g + geom_point(aes(color = drv), size = 4, alpha = .5)
g + geom_point(aes(color = drv)) + labs(title = 'Swirl Rules!') + labs(x = 'Displacement', y = 'Hwy Mileage')
g + geom_point(aes(color = drv), size = 2, alpha = .5) + geom_smooth(size = 4, linetype = 3, method = 'lm', se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = 'Times')
plot(myx, myy, type = 'l', ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim = c(-3, 3))
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black')
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black') + labs(title = "Swirl Rules!", x = 'Displacement', y = 'Highway Mileage')
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497 / 30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497 / 30, fill = cut)
qplot(price, data = diamonds, geom = 'density')
qplot(price, data = diamonds, geom = 'density', color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c('point', 'smooth'), method = 'lm')
qplot(carat, price, data = diamonds, color = cut, geom = c('point', 'smooth'), method = 'lm', facets = . ~ cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = 'lm', size = 3, color = 'pink')
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
dir()
getwd()
setwd('~/repo/RepData_PeerAssessment1')
# It's strange that you can't use open = 'r' to unz, otherwise you'll get a
# seek not enabled error with read.csv.
con <- unz('activity.zip', 'activity.csv')
# The con will be destroyed at the end of the function call to read.csv, so
# it's not necessary to close it explicitly.
df <- read.csv(con, na.strings = 'NA', stringsAsFactors = FALSE)
```
library(dplyr)
df2 <- df %>% group_by(date) %>% summarise(day_total =
sum(steps, na.rm = TRUE))
with(df2, hist(day_total, main = 'Histogram of steps taken each day',
xlab = 'steps'))
day_mean <- mean(df2$day_total)
day_median <- median(df2$day_total)
ls()
class(con)
close(con)
rm('con')
ls()
head(df)
df
str(df)
temp <- subset(df, df$date == '2012-10-12')
temp
head(temp, 20)
names(df)
df %>% group_by(interval) %>% summarise(avg_steps = mean(steps))
df %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = TRUE))
df %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = TRUE))  -> df3
dim(df3)
with(df3, plot(interval, avg_steps))
with(df3, plot(interval, avg_steps, ylab = 'average steps'))
with(df3, plot(interval, avg_steps, main = 'Plot of average steps of each 5-minute interval', ylab = 'average steps'))
with(df3, plot(interval, avg_steps, main = 'Plot of average steps each interval', xlab = '5-minute interval', ylab = 'average steps'))
with(df3, plot(interval, avg_steps, type = 'l', main = 'Plot of average steps each interval', xlab = '5-minute interval', ylab = 'average steps'))
with(df3, plot(interval, avg_steps, type = 'l', main = 'Plot of average steps each interval', xlab = '5-minute interval', ylab = 'average steps'))
max(df3$avg_steps)
?max
df3[df3$avg_steps == 206.1698,]
df3
filter(df3, avg_steps == max(df3$avg_steps))
max_steps <- df3 %>% filter(avg_steps == max(avg_steps))
max_steps
vies(max_steps)
view(max_steps)
View(max_steps)
na_num <- sum(!complete.case(df))
complete.cases(df)
na_num <- sum(!complete.cases(df))
na_num
df
head(df, 50)
head(df, 100)
head(df, 200)
ls()
temp <- subset(df, is.na(steps))
temp
ls()
df3
temp
dim(temp)
complete.cases(temp)
sum(complete.cases(temp))
?merge
df3
temp
df
?mutate
which(is.na(df$steps))
with(df, which(is.na(steps)))
which(is.na(df$steps))
df[which(is.na(df$steps)), ]
df[which(is.na(df$steps)), ]$steps
df[which(is.na(df$steps)), ]$steps
df3
df3$interval
df[which(is.na(df$steps)), ]$interval
df[which(is.na(df$steps)), ]$interval[1]
df3[df3$interval == df[which(is.na(df$steps)), ]$interval[1], ]
df3[df3$interval == df[which(is.na(df$steps)), ]$interval[2], ]
complete.cases(df)
df[complete.cases(df), ]
df[!complete.cases(df), ]
df[complete.cases(df), ] -> temp1
df[!complete.cases(df), ] -> temp2
dim(temp1)
dim(temp2)
dim(df)
names(temp2)
names(df3)
merge
?merge
merge(temp2, df3, by = 'interval', all.x = TRUE)
merge(temp2, df3, by = 'interval', all.x = TRUE) -> temp3
dim(temp3)
dim(temp2)
head(temp3)
head(temp1)
head(temp2)
head(temp3)
?select
temp3 %>% mutate(steps = avg_steps)
temp3 %>% mutate(steps = avg_steps) -> temp4
head(temp4)
temp4 %>% select(avg_steps)
head(temp4)
temp4 %>% select(steps, date, interval)
dim(temp4)
dim(temp1)
dim(temp2)
dim(temp3)
head(temp2)
head(temp3)
head(temp4)
ls()
temp4 %>% select(steps, date, interval) -> temp5
head(temp5)
?rbind
df_filled <- rbind(temp1, temp5)
head(df_filled)
dim(df_filled)
sum(!complet.cases(df_filled))
sum(!complete.cases(df_filled))
sum(complete.cases(df_filled))
head(temp1)
head(temp2)
head(temp3)
head(temp4)
par(main)
?hist
?title
na_num <- sum(!complete.cases(df))
df_complete <- df[complete.cases(df), ]
df_uncomplete <- df[!complete.cases(df), ]
df_uncomplete <- merge(df_uncomplete, df3, by = 'interval', all.x = TRUE)
df_uncomplete <- mutate(df_uncomplete, steps = avg_steps)
df_uncomplete <- select(df_uncomplete, steps, date, interval)
head(df_complete)
head(df_uncomplete)
df_filled <- rbind(df_complete, df_uncomplete)
head(df_filled)
df_filled <- df_filled %>% group_by(date) %>%
summarise(day_total = sum(steps, na.rm = TRUE))
df_filled <- df_filled %>% group_by(date) %>%
summarise(day_total = sum(steps, na.rm = TRUE))
head(df_filled)
with(df_filled, hist(day_total, main = 'Histogram of steps taken each day',
sub = '(missinag values filled with 5-minute averages)'
xlab = 'steps'))
with(df_filled, hist(day_total, main = 'Histogram of steps taken each day',
sub = '(missinag values filled with 5-minute averages)',
xlab = 'steps'))
day_mean_filled <- mean(df_filled$day_total)
day_median_filled <- median(df_filled$day_total)
day_mean_filled
day_median_filled
day_mean
day_median
df
as.Date('2012-10-12')
class(as.Date('2012-10-12'))
weekdays(as.Date('2012-10-12'))
class(weekdays(as.Date('2012-10-12')))
weekdays(as.Date('2012-10-12')) == '星期五'
?getlocale
?getLocale
?get.locale
??get.locale
??locale
??LC_TIME
Sys.getlocale(category = 'LC_TIME')
if (Sys.getlocale(category = 'LC_TIME') != 'en_CN.UTF-8') {
Sys.setlocale(category = 'LC_TIME') = 'en_CN.UTF-8'
}
if (Sys.getlocale(category = 'LC_TIME') != 'en_CN.UTF-8') {
Sys.setlocale(category = 'LC_TIME') = 'en_US.UTF-8'
}
Sys.getlocale()
Sys.getlocale(category = 'LC_TIME')
Sys.setlocale(category = 'LC_TIME') = 'en_US.UTF-8'
if (Sys.getlocale(category = 'LC_TIME') != 'en_CN.UTF-8') {
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
}
weekdays(as.Date('2012-10-12'))
?Date
library(lubridate)
help(package = lubridate)
mutate(df_filled, weekday_grp = weekdays(as.Date(date)) %in% c('Saturday', 'Sunday'))
head(df_filled)
ls()
df_filled <- rbind(df_complete, df_uncomplete)
df_filled2 <- df_filled %>% group_by(date) %>%
summarise(day_total = sum(steps, na.rm = TRUE))
with(df_filled2, hist(day_total, main = 'Histogram of steps taken each day',
sub = '(missinag values filled with 5-minute averages)',
xlab = 'steps'))
day_mean_filled2 <- mean(df_filled$day_total)
day_median_filled2 <- median(df_filled$day_total)
day_mean_filled2 <- mean(df_filled2$day_total)
day_median_filled2 <- median(df_filled2$day_total)
df_filled %>% mutate(weekday_grp = weekdays(as.Date(date)) %in%
c('Saturday', 'Sunday'))
df_filled %>%
mutate(weekday_grp = weekdays(as.Date(date)) %in%
c('Saturday', 'Sunday')) %>%
mutate(weekday_grp = factor(weekday_grp,
levels = c('weekend', 'weekday')))
?factor
df_filled %>%
mutate(weekday_grp = weekdays(as.Date(date)) %in%
c('Saturday', 'Sunday')) %>%
mutate(weekday_grp = factor(weekday_grp, levels = c(TRUE, FALSE),
labels = c('weekend', 'weekday')))
head(df_filled)
df_filled <- df_filled %>% mutate(weekday_grp = weekdays(as.Date(date)) %in%
c('Saturday', 'Sunday')) %>%
mutate(weekday_grp = factor(weekday_grp, levels = c(TRUE, FALSE),
labels = c('weekend', 'weekday')))
labels = c('weekend', 'weekday')))
head(df_filled)
library(latice)
xyplot
??xyplot
library(lattice)
with(df_filled, xyplot(steps ~ interval | weekday_grp, type = 'l'))
?xyplot
with(df_filled, xyplot(steps ~ interval | weekday_grp, type = 'l', layout = c(2, 1)))
with(df_filled, xyplot(steps ~ interval | weekday_grp, type = 'l', layout = c(1, 2)))
df3
dim(df3)
df_filled3 <- df_filled %>% group_by(interval) %>% summarise()
df_filled3 <- df_filled %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = TRUE))
df_filled3
df3
df_filled
dim(df_filled3)
df_filled3 <- df_filled %>% group_by(weekday_grp, interval) %>% summarise(avg_steps = mean(steps, na.rm = TRUE))
df_filled3
str(df_filled3)
head(df_filled3)
head(df_filled3, 100)
head(df_filled3, 20)
tail(df_filled3, 20)
df_filled <- df_filled %>% mutate(weekday_grp = weekdays(as.Date(date)) %in%
c('Saturday', 'Sunday')) %>%
mutate(weekday_grp = factor(weekday_grp, levels = c(TRUE, FALSE),
labels = c('weekend', 'weekday'))) %>%
group_by(weekday_grp, interval) %>%
summarise(avg_steps = mean(steps, na.rm = TRUE))
```
df_filled
with(df_filled, xyplot(avg_steps ~ interval | weekday_grp, type = 'l', layout = c(1, 2)))
with(df_filled, xyplot(avg_steps ~ interval | weekday_grp, type = 'l', layout = c(1, 2), ylab = 'Number of steps'))
library(lattice)
with(df_filled, xyplot(avg_steps ~ interval | weekday_grp, type = 'l',
layout = c(1, 2), ylab = 'Number of steps'))
df
head(df)
tail(df)
df
str(df)
day_mean
day_median
df3
max_steps
day_mean_filled
day_median_filled
day_median_filled2
df_filled
df
unique(df$date)
length(unique(df$date))
dim(df2)
max_steps
max_steps
with(df_filled, xyplot(avg_steps ~ interval | weekday_grp, type = 'l',
layout = c(1, 2), ylab = 'Number of steps',
main = 'Plot of average steps each interval (weekday vs weekend)'))
```
df_filled2
mean(df_filled2$day_total)
median(df_filled2$day_total)
day_mean_filled
day_median_filled
round(3.14159, 2)
int(3.14159, 2)
int(3.14159)
integer(3.14)
integer(3.14)
?int
?integer
?round
if (Sys.getlocale(category = 'LC_TIME') != 'en_US.UTF-8'){
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
}
if (Sys.getlocale(category = 'LC_TIME') != 'en_US.UTF-8'){
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
}
Sys.getlocale(category = 'LC_TIME')
Sys.getlocale(category = 'LC_TIME') != 'en_US.UTF-8'
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8'
)
